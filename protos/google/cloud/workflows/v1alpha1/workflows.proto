// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package google.cloud.workflows.v1alpha1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/workflows/v1alpha1;workflows";

// Manages workflow programs.
service Workflows {
  option (google.api.default_host) = "workflows.googleapis.com";
  option (google.api.oauth_scopes) = "https://www.googleapis.com/auth/cloud-platform";

  // Lists Workflows in a given project and location.
  rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{parent=projects/*/locations/*}/workflows"
    };
  }

  // Gets details of a single Workflow.
  rpc GetWorkflow(GetWorkflowRequest) returns (Workflow) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=projects/*/locations/*/workflows/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Creates a new workflow. If a workflow with the specified name already
  // exists in the specified project and location, the long running operation
  // will return `ALREADY_EXISTS` error.
  rpc CreateWorkflow(CreateWorkflowRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1alpha1/{parent=projects/*/locations/*}/workflows"
      body: "workflow"
    };
    option (google.longrunning.operation_info) = {
      response_type: "Workflow"
      metadata_type: "OperationMetadata"
    };
  }

  // Deletes a workflow with the specified name.
  rpc DeleteWorkflow(DeleteWorkflowRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=projects/*/locations/*/workflows/*}"
    };
    option (google.api.method_signature) = "name";
    option (google.longrunning.operation_info) = {
      response_type: "google.protobuf.Empty"
      metadata_type: "OperationMetadata"
    };
  }

  // Updates existing workflow and increases its
  // [version_id][google.cloud.workflows.v1alpha1.Workflow.version_id].
  // Has no impact on any workflow execution.
  rpc UpdateWorkflow(UpdateWorkflowRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1alpha1/{workflow.name=projects/*/locations/*/workflows/*}"
      body: "workflow"
    };
    option (google.longrunning.operation_info) = {
      response_type: "Workflow"
      metadata_type: "OperationMetadata"
    };
  }
}

// Workflow program to be executed by Workflows.
message Workflow {
  option (google.api.resource) = {
    type: "workflows.googleapis.com/Workflow"
    pattern: "projects/{project}/locations/{location}/workflows/{workflow}"
  };

  // Describes the current state of workflow deployment.
  enum State {
    // Invalid state.
    STATE_UNSPECIFIED = 0;

    // The workflow has been deployed successfully and is serving.
    ACTIVE = 1;

    // The workflow failed to deploy successfully and is not serving.
    FAILED = 2;

    // The workflow is being deployed.
    DEPLOYING = 3;

    // The workflow is being deleted.
    DELETING = 4;
  }

  // Name of the workflow resource, for example,
  // "projects/project1/locations/us-central1/workflows/workflow1".
  string name = 1;

  // Description of the workflow provided by the user.
  string description = 2;

  // Required. Location of the workflow source code.
  oneof source_code {
    // Workflow code to be executed.
    string source_contents = 3;
  }

  // Output only. State of the workflow deployment.
  State state = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The version identifier of the workflow. When the workflow gets
  // created, version_id is set to 1. Each deployment attempt increases the
  // version by 1.
  int64 version_id = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The timestamp of when the workflow was created.
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Output only. The last update timestamp of the workflow.
  google.protobuf.Timestamp update_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Labels associated with this workflow.
  map<string, string> labels = 8;

  // Name of the service account associated with the latest workflow version.
  // This service account represents the identity of the workflow and determines
  // what permissions the workflow has.
  // It should have the following format:
  // `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
  // Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
  // the account. The `ACCOUNT` value can be the `email` address or the
  // `unique_id` of the service account.
  //
  // If not provided, workflow will use the project's default service account.
  string service_account = 9;
}

// Request for the `ListWorkflows` method.
message ListWorkflowsRequest {
  // Required. Project and location from which the workflows should be listed,
  // for example, "projects/project1/locations/us-central1".
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "locations.googleapis.com/Location"
    }
  ];

  // Maximum number of workflows to return per call.
  int32 page_size = 2;

  // The value returned by the last
  // `ListWorkflowsResponse` indicates that
  // this is a continuation of a prior `ListWorkflows` call, and that the
  // system should return the next page of data.
  string page_token = 3;

  string filter = 4;

  string order_by = 5;
}

// Response for the `ListWorkflows` method.
message ListWorkflowsResponse {
  // The workflows which match the request.
  repeated Workflow workflows = 1;

  // If not empty, indicates that there may be more workflows that match
  // the request; this value should be passed in a new
  // [google.cloud.workflows.v1alpha1.Workflow][google.cloud.workflows.v1alpha1.Workflow]
  // to get more workflows.
  string next_page_token = 2;

  // Locations that could not be reached.
  repeated string unreachable = 3;
}

// Request for the `GetWorkflow` method.
message GetWorkflowRequest {
  // Required. Name of the workflow which information should be
  // retrieved, for example,
  // "projects/project1/locations/us-central1/workflows/workflow1".
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "workflows.googleapis.com/Workflow"
    }
  ];
}

// Request for the `CreateWorkflow` method.
message CreateWorkflowRequest {
  // Required. Project and location in which the workflow should be created, for
  // example "projects/project1/locations/us-central1".
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "locations.googleapis.com/Location"
    }
  ];

  // Required. Workflow to be created.
  Workflow workflow = 2 [(google.api.field_behavior) = REQUIRED];

  // Required. The ID of the workflow to be created. It has to fulfil the
  // following requirements:
  //
  // * Must contain only letters, numbers, underscores and hyphens.
  // * Must start with a letter.
  // * Must be between 1-64 characters.
  // * Must end with a number or a letter.
  // * Must be unique within the customer project / location.
  string workflow_id = 3 [(google.api.field_behavior) = REQUIRED];
}

// Request for the `DeleteWorkflow` method.
message DeleteWorkflowRequest {
  // Required. Name of the workflow which should be deleted, for example,
  // "projects/project1/locations/us-central1/workflows/workflow1".
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "workflows.googleapis.com/Workflow"
    }
  ];
}

// Request for the `UpdateWorkflow` method.
message UpdateWorkflowRequest {
  // Required. Workflow to be updated.
  Workflow workflow = 1 [(google.api.field_behavior) = REQUIRED];

  // List of the only fields to be updated. If not present, the entire workflow
  // will be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Represents the metadata of the long-running operation.
message OperationMetadata {
  // Output only. The time the operation was created.
  google.protobuf.Timestamp create_time = 1;

  // Output only. The time the operation finished running.
  google.protobuf.Timestamp end_time = 2;

  // Output only. Server-defined resource path for the target of the operation.
  string target = 3;

  // Output only. Name of the verb executed by the operation.
  string verb = 4;

  // Output only. Human-readable status of the operation, if any.
  string status_detail = 5;

  // Output only. Identifies whether the user has requested cancellation
  // of the operation. Operations that have successfully been cancelled
  // have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
  // corresponding to `Code.CANCELLED`.
  bool cancel_requested = 6;

  // Output only. API version used to start the operation.
  string api_version = 7;
}
